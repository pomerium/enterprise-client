syntax = "proto3";

package pomerium.dashboard;

option go_package = "github.com/pomerium/pomerium-console/pkg/pb";

import "google/protobuf/timestamp.proto";

// KeyPair represents raw Key Pair data for internal usage
message KeyPair {
  string id = 1;
  string name = 2;
  string namespace_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp modified_at = 5;

  // public certificate data
  bytes certificate = 7;
  // private key data
  bytes key = 8;
}

// PublicKeyAlgorithm is the algorithm of a public key
enum PublicKeyAlgorithm {
  PKA_UNKNOWN_DO_NOT_USE = 0;
  RSA = 1;
  DSA = 2;
  ECDSA = 3;
  ED25519 = 4;
}

// KeyUsage specifies the usage flags set on a signed TLS certificate
message KeyUsage {
  // standard key usages
  bool digital_signature = 1;
  bool content_commitment = 2;
  bool key_encipherment = 3;
  bool data_encipherment = 4;
  bool key_agreement = 5;
  // certificate authority
  bool cert_sign = 6;
  bool crl_sign = 7;
  bool encipher_only = 8;
  bool decipher_only = 9;
  // extensions derived from x509.ExtKeyUsage
  // server certificate
  bool server_auth = 10;
  // client certificate
  bool client_auth = 11;
}

// Name defines the x509 identity
message Name {
  repeated string country = 1;
  repeated string organization = 2;
  repeated string organizational_unit = 3;
  repeated string locality = 4;
  repeated string province = 5;
  repeated string street_address = 6;
  repeated string postal_code = 7;
  string serial_number = 8;
  string common_name = 9;
}

// Format specifies the encoding format of a certificate or key
enum Format {
  FORMAT_UNDEFINED_DO_NOT_USE = 0;
  PEM = 1;
}

// CertificateInfo is a .proto reflection of
// https://golang.org/pkg/crypto/x509/#Certificate
message CertificateInfo {
  int64 version = 1;
  string serial = 2;

  Name issuer = 3;
  Name subject = 4;

  google.protobuf.Timestamp not_before = 5;
  google.protobuf.Timestamp not_after = 6;

  KeyUsage key_usage = 7;

  repeated string dns_names = 10;
  repeated string email_addresses = 11;
  repeated string ip_addresses = 12;
  repeated string uris = 13;

  bool permitted_dns_domains_critical = 14;
  repeated string permitted_dns_domains = 15;
  repeated string excluded_dns_domains = 16;
  repeated string permitted_ip_ranges = 17;
  repeated string excluded_ip_ranges = 18;
  repeated string permitted_email_addresses = 19;
  repeated string excluded_email_addresses = 20;
  repeated string permitted_uri_domains = 21;
  repeated string excluded_uri_domains = 22;
}

// KeyPairRecord provides existing Key Pair metadata
message KeyPairRecord {
  string id = 1;
  string name = 2;
  string namespace_id = 3;
  // database record creation time
  google.protobuf.Timestamp created_at = 4;
  // database record modification time
  google.protobuf.Timestamp modified_at = 5;
  // information about the public certificate
  CertificateInfo cert_info = 7;
  // Key Pair has a private key attached
  bool has_private_key = 8;
}

message DeleteKeyPairRequest { string id = 1; }
message DeleteKeyPairResponse {}
message GetKeyPairRequest { string id = 1; }
message GetKeyPairResponse { KeyPairRecord key_pair = 1; }

// ListKeyPairsRequest defines the types of key pairs to list
message ListKeyPairsRequest {
  string namespace_id = 1;
  // list Key Pairs whose name contains the query string
  optional string query = 2;
  // list Key Pairs starting from an offset in the total list
  optional int64 offset = 3;
  // limit the number of entries returned
  optional int64 limit = 4;
  // `newest`, `oldest`, `name`, `from`
  optional string order_by = 5;
  // return key pairs that match the given domain
  optional string domain = 6;
}

// ListKeyPairsResponse is the list of Key Pairs found from a
// ListKeyPairsRequest
message ListKeyPairsResponse {
  // Key Pairs found
  repeated KeyPairRecord key_pairs = 1;
  int64 total_count = 2;
}

// CreateKeyPairRequest defines a Key Pair to create
message CreateKeyPairRequest {
  string name = 1;
  string namespace_id = 2;
  // encoding format of data
  Format format = 3;
  // public certificate data
  bytes certificate = 4;
  // private key data
  bytes key = 5;
}

message CreateKeyPairResponse { KeyPairRecord key_pair = 1; }

message UpdateKeyPairRequest {
  string id = 1;
  // encoding format of data
  Format format = 3;
  // public certificate data
  bytes certificate = 4;
  // private key data
  bytes key = 5;
}

message UpdateKeyPairResponse { KeyPairRecord key_pair = 1; }

// KeyChainService manages and store TLS Certificates, Keys and CAs, known as
// Key Pairs
service KeyChainService {
  // DeleteKeyPair remove an x509 key pair based on a DeleteKeyPairRequest
  rpc DeleteKeyPair(DeleteKeyPairRequest) returns (DeleteKeyPairResponse);
  // GetKeyPair retrieves an existing key pair
  rpc GetKeyPair(GetKeyPairRequest) returns (GetKeyPairResponse);
  // ListKeyPairs lists existing key pairs based on parameters in
  // ListKeyPairsRequest
  rpc ListKeyPairs(ListKeyPairsRequest) returns (ListKeyPairsResponse);
  // CreateKeyPair creates a new key pair
  rpc CreateKeyPair(CreateKeyPairRequest) returns (CreateKeyPairResponse);
  // CreateKeyPair creates a new key pair
  rpc UpdateKeyPair(UpdateKeyPairRequest) returns (UpdateKeyPairResponse);
}
