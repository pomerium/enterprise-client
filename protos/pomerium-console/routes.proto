syntax = "proto3";

package pomerium.dashboard;

option go_package = "github.com/pomerium/pomerium-console/pkg/pb";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "policy.proto";
import "route_health_check.proto";
import "route_redirect_action.proto";
import "validate/validate.proto";

message RouteRewriteHeader {
  string header = 1;
  oneof matcher { string prefix = 3; }
  string value = 2;
}

message RouteDirectResponse {
  uint32 status = 1;
  string body = 2;
}

enum IssuerFormat {
  // Issuer strings will be the hostname of the route, with no scheme or
  // trailing slash.
  IssuerHostOnly = 0;
  // Issuer strings will be a complete URI, including the scheme and ending
  // with a trailing slash.
  IssuerURI = 1;
}

enum BearerTokenFormat {
  BEARER_TOKEN_FORMAT_UNKNOWN = 0;
  BEARER_TOKEN_FORMAT_DEFAULT = 1;
  BEARER_TOKEN_FORMAT_IDP_ACCESS_TOKEN = 2;
  BEARER_TOKEN_FORMAT_IDP_IDENTITY_TOKEN = 3;
}

message JwtGroupsFilter {
  // Explicit list of group IDs/names to include.
  repeated string groups = 1;

  // Infer group IDs/names based on PPL groups criteria.
  optional bool infer_from_ppl = 2;
}

// LoadBalancingPolicy defines the strategy used to balance requests across
// upstream endpoints
enum LoadBalancingPolicy {
  // Default load balancing if not specified
  LOAD_BALANCING_POLICY_UNSPECIFIED = 0;
  // Classic round robin algorithm
  LOAD_BALANCING_POLICY_ROUND_ROBIN = 1;
  // Consistent hashing load balancing
  LOAD_BALANCING_POLICY_MAGLEV = 2;
  // Random selection of backend
  LOAD_BALANCING_POLICY_RANDOM = 3;
  // Consistent hashing on an attribute
  LOAD_BALANCING_POLICY_RING_HASH = 4;
  // Select backend with fewest active requests
  LOAD_BALANCING_POLICY_LEAST_REQUEST = 5;
}

// CircuitBreakerThresholds defines CircuitBreaker settings.
message CircuitBreakerThresholds {
  // The maximum number of connections that Envoy will make to the upstream
  // cluster. If not specified, the default is 1024.
  optional uint32 max_connections = 1;
  // The maximum number of pending requests that Envoy will allow to the
  // upstream cluster. If not specified, the default is 1024. This limit is
  // applied as a connection limit for non-HTTP traffic.
  optional uint32 max_pending_requests = 2;
  // The maximum number of parallel requests that Envoy will make to the
  // upstream cluster. If not specified, the default is 1024. This limit does
  // not apply to non-HTTP traffic.
  optional uint32 max_requests = 3;
  // The maximum number of parallel retries that Envoy will allow to the
  // upstream cluster. If not specified, the default is 3.
  optional uint32 max_retries = 4;
  // The maximum number of connection pools per cluster that Envoy will
  // concurrently support at once. If not specified, the default is unlimited.
  // Set this for clusters which create a large number of connection pools.
  optional uint32 max_connection_pools = 5;
}

// Route defines a proxy route's settings and policy associations
// Next ID: 74
message Route {
  message StringList { repeated string values = 1; }

  string id = 1;
  string namespace_id = 29;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp modified_at = 3;
  google.protobuf.Timestamp deleted_at = 4;

  string name = 5;
  optional string description = 65;
  optional string logo_url = 66;

  // name for prometheus stats, computed on first save
  string stat_name = 47;

  string from = 6;
  repeated string to = 7;
  reserved 40; // used envoy protobuf for redirect
  RedirectAction redirect = 67;
  RouteDirectResponse response = 59;

  optional string prefix = 8;
  optional string path = 9;
  optional string regex = 10;

  optional string prefix_rewrite = 36;
  optional string regex_rewrite_pattern = 37;
  optional string regex_rewrite_substitution = 38;

  optional string host_rewrite = 30;
  optional string host_rewrite_header = 31;
  optional string host_path_regex_rewrite_pattern = 32;
  optional string host_path_regex_rewrite_substitution = 33;

  optional int64 regex_priority_order = 45;

  optional google.protobuf.Duration timeout = 13;
  optional google.protobuf.Duration idle_timeout = 48;
  optional bool allow_websockets = 14;
  optional bool allow_spdy = 49;

  optional bool tls_skip_verify = 15;
  optional string tls_upstream_server_name = 51;
  optional string tls_downstream_server_name = 52;
  optional string tls_custom_ca_key_pair_id = 41;
  optional string tls_client_key_pair_id = 42;
  optional string tls_downstream_client_ca_key_pair_id = 43;

  optional bool tls_upstream_allow_renegotiation = 55;

  map<string, string> set_request_headers = 23;
  repeated string remove_request_headers = 24;
  map<string, string> set_response_headers = 56;
  repeated RouteRewriteHeader rewrite_response_headers = 44;
  reserved 50;

  optional bool preserve_host_header = 25;
  optional bool pass_identity_headers = 26;

  optional string kubernetes_service_account_token = 27;
  optional string kubernetes_service_account_token_file = 60;
  reserved 39;
  bool enable_google_cloud_serverless_authentication = 46;
  optional IssuerFormat jwt_issuer_format = 61;
  optional BearerTokenFormat bearer_token_format = 68;
  JwtGroupsFilter jwt_groups_filter = 62;
  optional string idp_client_id = 57;
  optional string idp_client_secret = 58;
  bool show_error_details = 53;
  string originator_id = 54;

  // policies applied to this route
  repeated string policy_ids = 28;

  // multi-route login additional hosts
  repeated string depends_on = 72;

  // computed properties (may be nil)
  repeated string policy_names = 34;
  // computed
  string namespace_name = 35;
  // computed
  repeated string enforced_policy_ids = 63;
  repeated string enforced_policy_names = 64;
  optional StringList idp_access_token_allowed_audiences = 69;

  optional LoadBalancingPolicy load_balancing_policy = 70
      [ (validate.rules).enum = {defined_only : true} ];

  repeated HealthCheck health_checks = 71;
  optional CircuitBreakerThresholds circuit_breaker_thresholds = 73;
}

// RouteWithPolicies contains automatically created routes and policies from a
// LoadRoutesRequest
message RouteWithPolicies {
  Route route = 1;
  repeated Policy policies = 2;
}

message DeleteRouteRequest { string id = 1; }
message DeleteRouteResponse {}

message DeleteRoutesRequest { repeated string ids = 1; }
message DeleteRoutesResponse {}

message GetRouteRequest { string id = 1; }
message GetRouteResponse { Route route = 1; }

// ListRoutesRequest defines the routes to list
message ListRoutesRequest {
  string namespace = 1;
  // list Routes who's name, from or to contains the query string
  optional string query = 2;
  // list Routes starting from an offset in the total list
  optional int64 offset = 3;
  // limit the number of Route entries returned
  optional int64 limit = 4;
  // sort the Routes by newest, oldest, name or from
  optional string order_by = 5;
  // list Routes belonging to the cluster, or the default cluster if not set
  optional string cluster_id = 6;
}
// ListRoutesResponse is the list of routes found for a ListRoutesRequest
message ListRoutesResponse {
  repeated Route routes = 1;
  int64 total_count = 2;
}

// LoadRoutesRequest creates a route based on a yaml payload
message LoadRoutesRequest {
  string name = 1;
  // OSS pomerium policy block
  bytes contents = 2;
}
// LoadRoutesResponse contains the routes and policies crated from a
// LoadRoutesRequest
message LoadRoutesResponse { repeated RouteWithPolicies routes = 1; }

message SetRouteRequest { Route route = 1; }
message SetRouteResponse { Route route = 1; }

message SetRoutesRequest { repeated Route routes = 1; }
message SetRoutesResponse { repeated Route routes = 1; }

message MoveRoutesRequest {
  repeated string route_ids = 1;
  string new_namespace_id = 2;
}
message MoveRoutesResponse {}

// RouteService manages proxy route definitions
service RouteService {
  // DeleteRoute removes an existing route
  rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse);
  // DeleteRoutes removes existing routes.
  rpc DeleteRoutes(DeleteRoutesRequest) returns (DeleteRoutesResponse);
  // GetRoute retrieves an existing route
  rpc GetRoute(GetRouteRequest) returns (GetRouteResponse);
  // ListRoutes lists routes based on ListRoutesRequest
  rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse);
  // LoadRoutes imports routes from an existing OSS configuration
  rpc LoadRoutes(LoadRoutesRequest) returns (LoadRoutesResponse);
  // SetRoute creates or, if id is defined, updates an existing route
  rpc SetRoute(SetRouteRequest) returns (SetRouteResponse);
  // SetRoutes creates or, if id is defined, updates existing routes
  rpc SetRoutes(SetRoutesRequest) returns (SetRoutesResponse);
  // MoveRoutes takes an array of routeIds and moves them to a new namespace
  rpc MoveRoutes(MoveRoutesRequest) returns (MoveRoutesResponse);
}
